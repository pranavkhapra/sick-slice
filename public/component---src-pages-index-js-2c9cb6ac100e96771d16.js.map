{"version":3,"sources":["webpack:///./src/utils/useLatestData.js","webpack:///./src/styles/Grids.js","webpack:///./src/components/LoadingGrid.js","webpack:///./src/components/ItemGrid.js","webpack:///./src/pages/index.js"],"names":["gql","String","raw","deets","useLatestData","useState","hotSlices","setHotSlices","slicemasters","setSlicemasters","useEffect","fetch","process","method","headers","body","JSON","stringify","query","then","res","json","data","StoreSettings","slicemaster","catch","err","console","log","HomePageGrid","styled","div","ItemsGrid","ItemStyles","LoadingGrid","count","Array","from","length","_","i","key","className","src","alt","width","height","ItemGrid","items","map","item","_id","name","image","asset","url","style","background","metadata","lqip","backgroundSize","CurrentlySlicing","HotSlices","HomePage"],"mappings":"kfAQA,IAAMA,EAAMC,OAAOC,IACbC,EAAK,gPA8DIC,MAjDf,WAAyB,MAEWC,qBAA3BC,EAFgB,KAELC,EAFK,OAIiBF,qBAAjCG,EAJgB,KAIFC,EAJE,KA2CvB,OApCAC,qBAAU,WAGRC,MAAMC,+DAAqC,CACzCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,MAAOlB,EAAF,IAKKG,EAGAA,OAOXgB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAGLb,EAAaa,EAAIE,KAAKC,cAAcjB,WACpCG,EAAgBW,EAAIE,KAAKC,cAAcC,gBAExCC,OAAM,SAACC,GACNC,QAAQC,IAAI,YACZD,QAAQC,IAAIF,QAEf,IACI,CACLpB,YACAE,iB,YCjESqB,EAAeC,IAAOC,IAAV,0EAAGD,CAAH,4IAUZE,EAAYF,IAAOC,IAAV,uEAAGD,CAAH,0DAOTG,EAAaH,IAAOC,IAAV,wEAAGD,CAAH,ghBChBR,SAASI,EAAT,GAAiC,IAAVC,EAAS,EAATA,MACpC,OACE,kBAACH,EAAD,KACGI,MAAMC,KAAK,CAAEC,OAAQH,IAAS,SAACI,EAAGC,GAAJ,OAC7B,kBAACP,EAAD,CAAYQ,IAAG,UAAYD,GACzB,2BACE,0BAAME,UAAU,QAAhB,eAEF,yBACEC,IAAI,0HACJD,UAAU,UACVE,IAAI,GACJC,MAAM,MACNC,OAAO,aCbJ,SAASC,EAAT,GAA8B,IAAVC,EAAS,EAATA,MACjC,OACE,kBAAChB,EAAD,KACGgB,EAAMC,KAAI,SAACC,GAAD,OACT,kBAACjB,EAAD,CAAYQ,IAAKS,EAAKC,KACpB,2BACE,0BAAMT,UAAU,QAAQQ,EAAKE,OAE/B,yBACEP,MAAM,MACNC,OAAO,MACPH,IAAQO,EAAKG,MAAMC,MAAMC,IAAtB,wBACHX,IAAKM,EAAKE,KACVI,MAAO,CACLC,WAAW,OAAQP,EAAKG,MAAMC,MAAMI,SAASC,KAAnC,IACVC,eAAgB,gBCZ9B,SAASC,EAAT,GAA6C,IAAjBrD,EAAgB,EAAhBA,aAC1B,OACE,6BACE,wBAAIkC,UAAU,UACZ,0BAAMA,UAAU,aAAhB,oBAEF,mEACElC,GAAgB,kBAAC0B,EAAD,CAAaC,MAAO,IACrC3B,KAAiBA,aAAD,EAACA,EAAc8B,SAC9B,4DAED9B,aAAA,EAAAA,EAAc8B,SAAU,kBAACS,EAAD,CAAUC,MAAOxC,KAIhD,SAASsD,EAAT,GAAmC,IAAdxD,EAAa,EAAbA,UACnB,OACE,6BACE,wBAAIoC,UAAU,UACZ,0BAAMA,UAAU,aAAhB,gBAEF,0DACEpC,GAAa,kBAAC4B,EAAD,CAAaC,MAAO,IAAO,IACzC7B,KAAcA,aAAD,EAACA,EAAWgC,SAAU,mDACnChC,aAAA,EAAAA,EAAWgC,SAAU,kBAACS,EAAD,CAAUC,MAAO1C,KAK9B,SAASyD,IAAY,IAAD,EACG3D,IAA5BI,EADyB,EACzBA,aAAcF,EADW,EACXA,UAEtB,OACE,yBAAKoC,UAAU,UACb,wDACA,iEACA,kBAACb,EAAD,KACE,kBAACgC,EAAD,CAAkBrD,aAAcA,IAChC,kBAACsD,EAAD,CAAWxD,UAAWA","file":"component---src-pages-index-js-2c9cb6ac100e96771d16.js","sourcesContent":["import { useEffect, useState } from 'react';\n// if you want to autoformatiing highlighting for a grapqhl string in a file\n// whne you arent using a library yu can use a little trick in your editor so that vs code\n// think and it will just return regular string\n\n// const gql = (parts, ...pieces) =>\n//     parts.map((part, i) => `${part}${pieces[i]} || ''`).join('');\n// or you can just use the\nconst gql = String.raw;\nconst deets = `\n    name\n                _id\n                image {\n                  asset {\n                    url\n                    metadata {\n                      lqip\n                    }\n                  }\n                }\n    `;\n\nfunction useLatestData() {\n  // hot slices\n  const [hotSlices, setHotSlices] = useState();\n  // slicemaster\n  const [slicemasters, setSlicemasters] = useState();\n  // we will use a side effect to fetch the data from the graphql endpoint\n\n  useEffect(function () {\n    // when the component loads,fetch the data\n    // we pass the empty array becasue we dont want to re-render it by any of changes we just want to render it when we load\n    fetch(process.env.GATSBY_GRAPHQL_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: gql`\n          query {\n            StoreSettings(id: \"downtown\") {\n              name\n              slicemaster {\n                ${deets}\n              }\n              hotSlices {\n                ${deets}\n              }\n            }\n          }\n        `,\n      }),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        // TODO: checl for errors\n        // set the data to state\n        setHotSlices(res.data.StoreSettings.hotSlices);\n        setSlicemasters(res.data.StoreSettings.slicemaster);\n      })\n      .catch((err) => {\n        console.log('SHOOOOOT');\n        console.log(err);\n      });\n  }, []);\n  return {\n    hotSlices,\n    slicemasters,\n  };\n}\n\nexport default useLatestData;\n","import styled from 'styled-components';\n\nexport const HomePageGrid = styled.div`\n  display: grid;\n  gap: 2rem;\n  --columns: 2;\n  grid-template-columns: repeat(var(--columns), minmax(auto, 1fr));\n  @media (max-width: 800px) {\n    --columns: 1;\n  }\n`;\n\nexport const ItemsGrid = styled.div`\n  display: grid;\n  gap: 2rem;\n  grid-template-columns: 1fr 1fr;\n`;\n\n// Single Grid Item (for home page)\nexport const ItemStyles = styled.div`\n  text-align: center;\n  position: relative;\n  img {\n    height: auto;\n    font-size: 0;\n  }\n  p {\n    top: 0;\n    transform: rotate(-2deg) translateY(-10px);\n    position: absolute;\n    width: 100%;\n    left: 0;\n    margin: 0;\n    font-size: 2rem;\n    font-size: clamp(12px, 5vw, 20px);\n  }\n  .mark {\n    display: inline;\n  }\n  @keyframes shine {\n    from {\n      background-position: 200%;\n    }\n    to {\n      background-position: -40px;\n    }\n  }\n  img.loading {\n    --shine: white;\n    --background: var(--grey);\n    background-image: linear-gradient(\n      90deg,\n      var(--background) 0px,\n      var(--shine) 40px,\n      var(--background) 80px\n    );\n    background-size: 500px;\n    animation: shine 1s infinite linear;\n  }\n`;\n","import React from 'react';\nimport { ItemsGrid, ItemStyles } from '../styles/Grids';\n\nexport default function LoadingGrid({ count }) {\n  return (\n    <ItemsGrid>\n      {Array.from({ length: count }, (_, i) => (\n        <ItemStyles key={`loader-${i}`}>\n          <p>\n            <span className=\"mark\">Loading...</span>\n          </p>\n          <img\n            src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUAAAAECAQAAADsOj3LAAAADklEQVR42mNkgANGQkwAAJoABWH6GPAAAAAASUVORK5CYII=\"\n            className=\"loading\"\n            alt=\"\"\n            width=\"500\"\n            height=\"400\"\n          />\n        </ItemStyles>\n      ))}\n    </ItemsGrid>\n  );\n}\n","import React from 'react';\nimport { ItemsGrid, ItemStyles } from '../styles/Grids';\n\nexport default function ItemGrid({ items }) {\n  return (\n    <ItemsGrid>\n      {items.map((item) => (\n        <ItemStyles key={item._id}>\n          <p>\n            <span className=\"mark\">{item.name}</span>\n          </p>\n          <img\n            width=\"500\"\n            height=\"400\"\n            src={`${item.image.asset.url}?w=500&h=400&fit=crop`}\n            alt={item.name}\n            style={{\n              background: `url(${item.image.asset.metadata.lqip})`,\n              backgroundSize: 'cover',\n            }}\n          />\n        </ItemStyles>\n      ))}\n    </ItemsGrid>\n  );\n}\n","import React from 'react';\nimport useLatestData from '../utils/useLatestData';\nimport { HomePageGrid } from '../styles/Grids';\nimport LoadingGrid from '../components/LoadingGrid';\nimport ItemGrid from '../components/ItemGrid';\n\nfunction CurrentlySlicing({ slicemasters }) {\n  return (\n    <div>\n      <h2 className=\"center\">\n        <span className=\"mark tilt\">Slicemasters On</span>\n      </h2>\n      <p>Standing by, ready to slice you up!</p>\n      {!slicemasters && <LoadingGrid count={4} />}\n      {slicemasters && !slicemasters?.length && (\n        <p>No one is working right now!</p>\n      )}\n      {slicemasters?.length && <ItemGrid items={slicemasters} />}\n    </div>\n  );\n}\nfunction HotSlices({ hotSlices }) {\n  return (\n    <div>\n      <h2 className=\"center\">\n        <span className=\"mark tilt\">Hot Slices!</span>\n      </h2>\n      <p>Come on by, buy the slice!</p>\n      {!hotSlices && <LoadingGrid count={4} />}{' '}\n      {hotSlices && !hotSlices?.length && <p>Nothin' in the Case</p>}\n      {hotSlices?.length && <ItemGrid items={hotSlices} />}\n    </div>\n  );\n}\n\nexport default function HomePage() {\n  const { slicemasters, hotSlices } = useLatestData();\n\n  return (\n    <div className=\"center\">\n      <h1>The Best Pizza Downtown!</h1>\n      <p>Open 11am to 11pm Every Single Day</p>\n      <HomePageGrid>\n        <CurrentlySlicing slicemasters={slicemasters} />\n        <HotSlices hotSlices={hotSlices} />\n      </HomePageGrid>\n    </div>\n  );\n}\n"],"sourceRoot":""}